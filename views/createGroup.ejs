<%- include base/header.ejs %>
        <div class="main">
            <div class="location clearfix">
                <h1>创建星球</h1>
            </div> 
            <div class="create-p">
                <form class="cp-form line-form" action="/createGroup" title="" method="post">
                    <div class="cp-group line-fgroup">
                        <label for="planet-name"></label>
                        <input type="text" name="name" value="" placeholder="请输入星球名称" id="planet-name"> 
                    </div>
                    <div class="upPIcon">
                        <h4>星球头像（选填）：</h4>
                        <!-- <input type="file" name="g_image" value="" placeholder="" id="upImg"> -->
                        <button type="button" id="upImgBtn">+</button>
                    </div>
                    <div class="cp-des">
                        <h4>星球说明（选填）：</h4>
                        <textarea class="form-control" name="g_introduction"></textarea>
                    </div>
                    <button type="submit">创建</button>
                </form>
            </div>
        </div> 
        <%- include base/baseJS.ejs %>
        <script>
            // 封装 console.log 函数
            function printLog(title, info) {
                window.console && console.log(title, info);
            }
            // 创建上传对象
            var uploader = Qiniu.uploader({
                runtimes: 'html5,flash,html4',    //上传模式,依次退化
                browse_button: upImgBtn,       //上传选择的点选按钮，**必需**
                uptoken_url: '/uptoken',
                    //Ajax请求upToken的Url，**强烈建议设置**（服务端提供）
                // uptoken : '<Your upload token>',
                    //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
                // unique_names: true,
                    // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
                // save_key: true,
                    // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
                domain: 'http://7xlx4u.com1.z0.glb.clouddn.com/',
                    //bucket 域名，下载资源时用到，**必需**
                //container: containerId,           //上传区域DOM ID，默认是browser_button的父元素，
                max_file_size: '100mb',           //最大文件体积限制
                flash_swf_url: '../js/plupload/Moxie.swf',  //引入flash,相对路径
                filters: {
                        mime_types: [
                          //只允许上传图片文件 （注意，extensions中，逗号后面不要加空格）
                          { title: "图片文件", extensions: "jpg,gif,png,bmp" }
                        ]
                },
                max_retries: 3,                   //上传失败最大重试次数
                dragdrop: true,                   //开启可拖曳上传
                //drop_element: 'editor-container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
                chunk_size: '4mb',                //分块上传时，每片的体积
                auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
                init: {
                    'FilesAdded': function(up, files) {
                        plupload.each(files, function(file) {
                            // 文件添加进队列后,处理相关的事情
                            //printLog('on FilesAdded');
                        });
                    },
                    'BeforeUpload': function(up, file) {
                        // 每个文件上传前,处理相关的事情
                        //printLog('on BeforeUpload');
                    },
                    'UploadProgress': function(up, file) {
                        // 显示进度条
                        //editor.showUploadProgress(file.percent);
                    },
                    'FileUploaded': function(up, file, info) {
                        // 每个文件上传成功后,处理相关的事情
                        // 其中 info 是文件上传成功后，服务端返回的json，形式如
                        // {
                        //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
                        //    "key": "gogopher.jpg"
                        //  }
                        //printLog(info);
                        // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
                        
                        var domain = up.getOption('domain');
                        var res = $.parseJSON(info);
                        var sourceLink = domain + res.key; //获取上传成功后的文件的Url

                       // printLog(sourceLink);
                        console.log(sourceLink);
                        var url = 'url(' + sourceLink + ')';
                        // 插入图片到editor
                        $("#upImgBtn").html("");
                        $("#upImgBtn").css('background-image', url);
                    },
                    'Error': function(up, err, errTip) {
                        //上传出错时,处理相关的事情
                        printLog('on Error');
                    },
                    'UploadComplete': function() {
                        //队列文件处理完毕后,处理相关的事情
                        //printLog('on UploadComplete');

                        // 隐藏进度条
                        //editor.hideUploadProgress();
                    }
                    // Key 函数如果有需要自行配置，无特殊需要请注释
                    //,
                    // 'Key': function(up, file) {
                    //     // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
                    //     // 该配置必须要在 unique_names: false , save_key: false 时才生效
                    //     var key = "";
                    //     // do something with key here
                    //     return key
                    // }
                }
            });
            // domain 为七牛空间（bucket)对应的域名，选择某个空间后，可通过"空间设置->基本设置->域名设置"查看获取
            // uploader 为一个plupload对象，继承了所有plupload的方法，参考http://plupload.com/docs
        
        </script>
        <script type="text/javascript">
            var create_p ={
                pName: $("#planet-name"),
                cpForm: $(".cp-form"),
                upImgBtn: $("#upImgBtn"),
                upImg: $("#upImg"),
                cpDes: $(".cp-des").children('textarea'),
                imgData: null,
                verificate: function(){
                    var myreg = /^[0-9a-zA-Z\u4E00-\u9FA5\_]*$/;
                    if (this.pName.val().length<1 || this.pName.val().length>20) {
                        sweetAlert("格式错误","请输入1-20位字符做为星球名称","warning");
                        return false;
                    }
                    if (!myreg.test(this.pName.val())) {
                        sweetAlert("格式错误","只允许中文、数字、字母和下划线","warning");
                        return false;
                    }
                    if (this.cpDes.val().length > 50){
                        sweetAlert("格式错误","星球介绍不能超于50字","warning");
                        return false;
                    }
                    return true;
                },
                validateImg:function(data,filters){
                    var pos = data.indexOf(",") + 1;
                    for (var e in filters) {
                        if (data.indexOf(filters[e]) === pos) {
                            return e;
                        }
                    }
                    return null;
                },
                showPrvImg:function(src,prvid){
                    var url = 'url(' + src + ')';
                    prvid.css('background-image', url);
                    prvid.html("");
                },
                previewImage: function(){
                    /* file：file控件
                     * prvid: 图片预览
                    */
                    var self = this;
                    var filters = {
                        "jpeg"  : "/9j/4",
                        "gif"   : "R0lGOD",
                        "png"   : "iVBORw"
                    };
                    var limit = 1*1024*1024;
                    if (window.FileReader) { // html5方案
                        for (var i=0, f; f = self.upImg[0].files[i]; i++) {
                            var size = f.size;
                            var fr = new FileReader();
                            fr.onload = function(e) {
                                var src = e.target.result;
                                if (!self.validateImg(src,filters)) {
                                    sweetAlert('提示', "上传格式不正确", 'warning');
                                } else if(size> limit){
                                    console.log(size);
                                    sweetAlert('提示', "图片大小不能超过1M", 'warning');
                                }
                                else {
                                    self.showPrvImg(src,self.upImgBtn);
                                    self.imgData = src;
                                   console.log(self.imgData);
                                }
                            }
                            fr.readAsDataURL(f);
                        }
                    } else { // 降级处理
                        if ( !/\.jpg$|\.png$|\.gif$/i.test(self.upImg[0].value) ) {
                            sweetAlert('提示', "上传格式不正确", 'warning');
                        } else {
                            self.showPrvImg(self.upImg[0].value,self.upImgBtn);
                            self.imgData = self.upImg[0].value;
                        }
                    }
                },
                bindEvent: function() {
                    var self = this;
                    self.cpForm.submit(function(event){
                        //console.log(self.imgData);
                        event.preventDefault();
                        if (self.verificate()) {
                            $.ajax({
                                type: "post",
                                url: "/createGroup",
                                async: true,
                                data:{
                                    name: self.pName.val(),
                                    user_id: localStorage.getItem("userID"),
                                    g_introduction: self.cpDes.val().trim(),
                                    g_image: self.imgData
                                    //g_image:self.upImg[0].value
                                },
                                success:function(data){
                                    console && console.log(data);
                                    if (data.ret == 200 && data.data){
                                        if (data.data.code == 0 && data.data.msg){
                                            sweetAlert('提示', data.data.msg, 'warning');
                                        } else {
                                            window.location.href = '/group/' + data.data.info.group_base_id;
                                            //console.log(data.data.group_base_id);
                                        }
                                    }
                                },
                                error: function(x, h, r) {
                                    console && console.log(x, h, r);
                                }
                            });
                        }
                    });
                    // self.upImgBtn.on('click', function(event) {
                    //     self.upImg.trigger('click');
                    // });
                    // self.upImg.on('change', function(event) {
                    //    self.previewImage();
                    // });
                },
                init: function(){
                    global.GotoIndex();
                    this.bindEvent();
                }
            }
            create_p.init();
        </script>
        <%- include base/footer.ejs %>